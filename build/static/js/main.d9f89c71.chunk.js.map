{"version":3,"sources":["components/ColorPicker.js","components/SizeSetting.js","components/Reset.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["ColorPicker","props","setActiveColor","color","onReceiveColor","state","colors","elmColors","this","map","index","key","style","backgroundColor","className","onClick","Component","SizeSetting","setFontSize","size","onReceiveFontSize","fontSize","type","Reset","onReset","Result","id","App","onSetColor","params","setState","onSetFontSize","onResetSetting","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9f89c71.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class ColorPicker extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       colors: ['red', 'green', 'blue', 'yellow', '#ccc']\r\n    }\r\n  }\r\n\r\n  setActiveColor = (color) => {\r\n    this.props.onReceiveColor(color)\r\n  }\r\n  \r\n  render() {\r\n    const elmColors = this.state.colors.map((color, index) => {\r\n      return (\r\n        <span \r\n          key={index} \r\n          style={{backgroundColor:color}}\r\n          className={this.props.color===color ? 'active' : ''}\r\n          onClick={ () => this.setActiveColor(color) }\r\n        ></span>\r\n      )\r\n    });\r\n    return (\r\n      <div className=\"col-xs-12 col-sm-12 col-md-6 col-lg-6\">\r\n        <div className=\"panel panel-primary\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">Color Picker</h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            {elmColors}\r\n            <hr />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ColorPicker;\r\n","import React, { Component } from 'react'\r\n\r\nexport class SizeSetting extends Component {\r\n\r\n  setFontSize = (size) => {\r\n    this.props.onReceiveFontSize(size);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"panel panel-warning\">\r\n        <div className=\"panel-heading\">\r\n          <h3 className=\"panel-title\">Size : { this.props.fontSize }</h3>\r\n        </div>\r\n        <div className=\"panel-body\">\r\n          <button type=\"button\" className=\"btn btn-success\" onClick={ () => this.setFontSize(2) }>Tăng</button> &nbsp;\r\n          <button type=\"button\" className=\"btn btn-success\" onClick={ () => this.setFontSize(-2) }>Giảm</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SizeSetting;\r\n","import React, { Component } from 'react'\r\n\r\nexport class Reset extends Component {\r\n\r\n  onClick = () => {\r\n    this.props.onReset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <button type=\"button\" className=\"btn btn-primary\" onClick={ this.onClick }>Reset</button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Reset;\r\n","import React, { Component } from 'react'\r\n\r\nexport class Result extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n        <p>Color : {this.props.color} - Fontsize : {this.props.fontSize}px</p>\r\n        <div \r\n          id=\"content\" \r\n          style={{\r\n            color: this.props.color,\r\n            fontSize: this.props.fontSize,\r\n          }}\r\n        >\r\n          Nội dung setting\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport ColorPicker from './components/ColorPicker';\nimport SizeSetting from './components/SizeSetting';\nimport Reset from './components/Reset';\nimport Result from './components/Result';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       color : 'red',\n       fontSize : 12,\n    }\n  }\n\n  onSetColor = (params) => {\n    this.setState({\n      color : params,\n    })\n  }\n\n  onSetFontSize = (size) => {\n    if (this.state.fontSize + size >= 8 && this.state.fontSize + size <= 36) {\n      this.setState({\n        fontSize : this.state.fontSize + size,\n      })\n    };\n  };\n\n  onResetSetting = () => {\n    this.setState({\n      color : 'red',\n      fontSize : 12,\n    })\n  };\n  \n  render() {\n    return (\n      <div className=\"container mt-50\">\n      <div className=\"row\">\n        <ColorPicker \n          color={ this.state.color } \n          onReceiveColor={ this.onSetColor } \n        />\n        <div className=\"col-xs-12 col-sm-12 col-md-6 col-lg-6\">\n          <SizeSetting\n            fontSize={ this.state.fontSize }\n            onReceiveFontSize={ this.onSetFontSize }\n          />\n          <Reset onReset={ this.onResetSetting } />\n        </div>\n        <Result \n          color={this.state.color}\n          fontSize={this.state.fontSize}\n        />\n        \n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}